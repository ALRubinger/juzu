= Deploy the applications =

Before diving in the technical part of this tutorial, we need to study how to deploy the examples and how to use them.
In the package you downloaded you will find a war file adapted to your portal server in the ##/tutorial## directory:

* ##juzu-tutorial-examples-gatein.war## for the GateIn portal server
* ##juzu-tutorial-examples-liferay.war## for the Liferay portal server

The main reason we have two servers is that the jars are not exactly the same, each is adapted to the portal
server you will use. When you deploy the applications, the deployment process will print information in the
console, similar to:

{{screen}}
INFO: Deploying web application archive juzu-tutorial-gatein.war
[Weather4Portlet] Building application
[Weather4Portlet] Using injection org.juzu.impl.spi.inject.cdi.CDIBootstrap
[Weather4Portlet] Starting Weather4Application
[Weather4Portlet] Dev mode scanner monitoring /java/gatein/webapps/juzu-tutorial-gatein/WEB-INF/src
[Weather3Portlet] Building application
[Weather3Portlet] Using injection org.juzu.impl.spi.inject.spring.SpringBootstrap
[Weather3Portlet] Starting Weather3Application
[Weather3Portlet] Dev mode scanner monitoring /java/gatein/webapps/juzu-tutorial-gatein/WEB-INF/src
[Weather5Portlet] Building application
[Weather5Portlet] Using injection org.juzu.impl.spi.inject.cdi.CDIBootstrap
[Weather5Portlet] Starting Weather5Application
[Weather5Portlet] Dev mode scanner monitoring /java/gatein/webapps/juzu-tutorial-gatein/WEB-INF/src
[Weather2Portlet] Building application
[Weather2Portlet] Using injection org.juzu.impl.spi.inject.cdi.CDIBootstrap
[Weather2Portlet] Starting Weather2Application
[Weather2Portlet] Dev mode scanner monitoring /java/gatein/webapps/juzu-tutorial-gatein/WEB-INF/src
[Weather1Portlet] Building application
[Weather1Portlet] Using injection org.juzu.impl.spi.inject.cdi.CDIBootstrap
[Weather1Portlet] Starting Weather1Application
[Weather1Portlet] Dev mode scanner monitoring /java/gatein/webapps/juzu-tutorial-gatein/WEB-INF/src
{{/screen}}

As we can notice, there are 5 applications deployed, one for each of the topic of this tutorial

* Weather1Application: [[#quickstart]]
* Weather2Application: [[#template_overview]]
* Weather3Application: [[#dependency_injection]]
* Weather4Application: [[#views]]
* Weather5Application: [[#actions]]
* Weather6Application: [[#type_safe_templating]]
* Weather7Application: [[#preferences]]

= Interacting with the application =

In this tutorial, Juzu applications are deployed in the **//dev//** mode. This runtime mode allows you to modify the
source code of the application, Juzu will pick up the modifications and update the running application almost
instantanesouly.

The source code for the five applications is in the ##/WEB-INF/src## directory of the war file, each application has
its own package, for instance the quickstart application uses the package ##examples.tutorial.weather1##. The first
version of the application shows the most basic Juzu application. Our application is declared in the
##examples.tutorial.weather1## package package annotated with the ##@Application## annotation This annotation declares
a Juzu application and does not require any mandatory value. Like classes, methods or fields, Java packages can be
annotated, such packages declaration are represented by a special file named ##package-info.java##.

Usually an application is made of controllers and templates, in this example, the ##Weather## Java class contains a method
annotated with the ##@View## annotation, which turns the ##Weather## class into a Juzu controller. The controller method
##index()## is the name of the default method that Juzu will call.

{{java}}
{@include examples.tutorial.weather1.Weather#index()}
{{/java}}

Methods annotated by ##@View## have the unique purpose of providing markup, they are called //view//. In our case,
the method delegates the rendering to the ##index.gtmpl## template. The template is injected in the controller thanks
to the ##@Inject## annotation and the ##@Path("index.gtmpl")## annotation.

{{java}}
{@include examples.tutorial.weather1.Weather#index}
{{/java}}

By default templates are located in the ##templates## package of the application, in our case the
##examples.tutorial.weather1.templates## package. The ##@Path## annotation specifies the path of the template in this
package. The templates are located in the same source tree than the java classes because the files must be available
for the Java compiler.
