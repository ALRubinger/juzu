We have seen basic view controller, in this section we will study more in depth view controllers. A view controller is
invoked when the application needs to be rendered. The //weather// application has two view controller methods.

The ##show## controller method is parameterized by the ##location## view parameter.

{{java}}
{@include examples.tutorial.weather.Weather#show(java.lang.String)}
{{/java}}

A view parameter is bound to the current navigation of the application and its value is managed by the framework.
We will study later more in depth the concepts of navigational state.

At this point it is normal to wonder what makes the navigation parameter value change. Let's have a closer look at
the ##index.gtmpl## application template.

{{code href=examples/tutorial/weather/templates/index.gtmpl/}}

The template generates links that change the view parameters when they are processed. It uses a special syntax
that references the view method, for instance the script fragment ##@{show(location = 'paris')}## generates an url
that updates the ##location## view parameter to the ##paris## value.

The second controller method is an index method that simply invokes the ##show## controller with a predefined
value.

{{java}}
{@include examples.tutorial.weather.Weather#index()}
{{/java}}

We could't close this section without talking about **safe urls**. Juzu is deeply integrated at the heart of the
Java compiler and performs many checks to detect applications bugs during the application compilation. Among those
checks, templates are validated and the url syntax ##@{ }## is checked against the application controllers, in fact
Juzu will resolve an url syntax until it finds one controller that resolves the specified name and parameters. If not
Juzu will make the compilation fail and give detailled information about the error. This kind of feature makes Juzu really
unique among all other web frameworks, we will see some other later.

{{note}}Juzu leverages the [[Annotation Processing Tool>>http://download.oracle.com/javase/6/docs/technotes/guides/apt/index.html]]
(APT) facility standardized since Java 6. APT works with any Java compiler and is not specific to a build system or IDE,
it just works anywhere, we will see later that it even works with Eclipse incremental compiler.{{/note}}